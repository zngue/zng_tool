package main

import (
	"bytes"
	"flag"
	"fmt"
	"github.com/zngue/zng_tool/app/util"
	"google.golang.org/protobuf/compiler/protogen"
)

var showVersion = flag.Bool("version", false, "print the version and exit")

func main() {
	opts := &protogen.Options{}
	flag.Parse()
	if *showVersion {
		fmt.Printf("protoc-gen-gin-http %v\n", "v1.0.1")
		return
	}
	opts.Run(func(gen *protogen.Plugin) error {
		for _, file := range gen.Files {
			if !file.Generate {
				continue
			}
			fileName := file.GeneratedFilenamePrefix + ".gin_service.pb.go"
			g := gen.NewGeneratedFile(fileName, file.GoImportPath)
			//g.P("// Code generated by protoc-gen-gin-tmp. DO NOT EDIT.")
			//g.P("package ", file.GoPackageName)
			g.P()
			var messageMap = make(map[string]protogen.GoIdent)
			for _, message := range file.Messages {
				messageMap[message.GoIdent.GoName] = message.GoIdent
			}
			buffer := &bytes.Buffer{}
			for serverIndex, service := range file.Services {
				sd := &ServiceDesc{
					ServiceType:   service.GoName,
					ServiceName:   string(service.Desc.FullName()),
					Metadata:      file.Desc.Path(),
					GoPackageName: string(file.GoPackageName),
					GoImportPath:  file.GoImportPath.String(),
				}
				var methodItems []*MethodDesc
				for methodIndex, method := range service.Methods {
					if method.Desc.IsStreamingClient() || method.Desc.IsStreamingServer() {
						continue
					}
					methodItems = append(methodItems, &MethodDesc{
						Name:         method.GoName,
						OriginalName: string(method.Desc.Name()),
						MethodIndex:  methodIndex,
						ServerIndex:  serverIndex,
						Request: func() string {
							var name = g.QualifiedGoIdent(method.Input.GoIdent)
							if _, ok := messageMap[method.Input.GoIdent.GoName]; ok {
								return fmt.Sprintf("%s.%s", file.GoPackageName, name)
							}
							return name
						}(),
						Reply: func() string {
							var name = g.QualifiedGoIdent(method.Output.GoIdent)
							if _, ok := messageMap[method.Output.GoIdent.GoName]; ok {
								return fmt.Sprintf("%s.%s", file.GoPackageName, name)
							}
							return g.QualifiedGoIdent(method.Output.GoIdent)
						}(),
					})
				}
				sd.Methods = methodItems
				tmp := sd.execute()
				g.P(tmp)
				content, err := g.Content()
				if err != nil {
					fmt.Println("err", err)
					return nil
				}
				buffer.WriteString(string(content))
				s := buffer.String()
				err = util.WriteFile("abc-ac.go", s)
				if err != nil {
					fmt.Println("err", err)
					return nil
				}
			}
			g.Skip()
		}
		return nil
	})
}

type ServiceDesc struct {
	ServiceType   string
	ServiceName   string
	Metadata      string
	Methods       []*MethodDesc
	GoPackageName string
	GoImportPath  string
}
type MethodDesc struct {
	Name         string
	OriginalName string
	MethodIndex  int
	ServerIndex  int
	Request      string
	Reply        string
}
