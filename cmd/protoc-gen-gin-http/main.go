package main

import (
	"flag"
	"fmt"
	"github.com/zngue/zng_tool/app/util"
	"github.com/zngue/zng_tool/third_party/google/annotations"
	"google.golang.org/protobuf/compiler/protogen"
	"google.golang.org/protobuf/proto"
	"strings"
)

var showVersion = flag.Bool("version", false, "print the version and exit")

func main() {
	opts := &protogen.Options{}
	flag.Parse()
	if *showVersion {
		fmt.Printf("protoc-gen-gin-http %v\n", "v1.0.1")
		return
	}
	opts.Run(func(gen *protogen.Plugin) error {
		files := gen.Files

		for _, file := range files {
			fileName := file.GeneratedFilenamePrefix + ".gin_http.pb.go"
			g := gen.NewGeneratedFile(fileName, file.GoImportPath)
			g.P("// Code generated by protoc-gen-gin-http. DO NOT EDIT.")
			g.P("package ", file.GoPackageName)
			g.P()
			for serverIndex, service := range file.Services {
				sd := &ServiceDesc{
					ServiceType: service.GoName,
					Comment:     string(service.Comments.Leading),
					ServiceName: string(service.Desc.FullName()),
					Metadata:    file.Desc.Path(),
				}
				for methodIndex, method := range service.Methods {
					if method.Desc.IsStreamingClient() || method.Desc.IsStreamingServer() {
						continue
					}
					comment := method.Comments.Leading.String() + method.Comments.Trailing.String()
					if comment != "" {
						comment = "// " + method.GoName + strings.TrimPrefix(strings.TrimSuffix(comment, "\n"), "//")
					}
					rule, _ := proto.GetExtension(method.Desc.Options(), annotations.E_Http).(*annotations.HttpRule)
					path, useMethod := RequestInfo(rule, util.LowerFirst(service.GoName), util.LowerFirst(method.GoName))
					var methodDesc = &MethodDesc{
						Name:         method.GoName,
						OriginalName: string(method.Desc.Name()),
						MethodIndex:  methodIndex,
						ServerIndex:  serverIndex,
						Request:      g.QualifiedGoIdent(method.Input.GoIdent),
						Reply:        g.QualifiedGoIdent(method.Output.GoIdent),
						Comment:      comment,
						Path:         path,
						Method:       useMethod,
					}
					sd.Methods = append(sd.Methods, methodDesc)
				}
				serverContent := sd.execute()
				g.P(serverContent)
			}
		}
		return nil
	})
}
