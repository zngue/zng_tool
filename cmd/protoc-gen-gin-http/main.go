package main

import (
	"flag"
	"fmt"
	"google.golang.org/genproto/googleapis/api/annotations"
	"google.golang.org/protobuf/compiler/protogen"
	"google.golang.org/protobuf/proto"
	"net/http"
)

var showVersion = flag.Bool("version", false, "print the version and exit")

func main() {
	opts := &protogen.Options{}
	flag.Parse()
	if *showVersion {
		fmt.Printf("protoc-gen-gin-http %v\n", "v1.0.1")
		return
	}
	opts.Run(func(gen *protogen.Plugin) error {
		files := gen.Files

		for _, file := range files {
			fileName := file.GeneratedFilenamePrefix + ".gin_http.pb.go"
			g := gen.NewGeneratedFile(fileName, file.GoImportPath)
			g.P("// Code generated by protoc-gen-gin-http. DO NOT EDIT.")
			g.P("package ", file.GoPackageName)
			g.P()
			for serverIndex, service := range file.Services {
				sd := &ServiceDesc{
					ServiceType: service.GoName,
					Comment:     string(service.Comments.Leading),
					ServiceName: string(service.Desc.FullName()),
					Metadata:    file.Desc.Path(),
				}
				for methodIndex, method := range service.Methods {
					if method.Desc.IsStreamingClient() || method.Desc.IsStreamingServer() {
						continue
					}
					rule, ok := proto.GetExtension(method.Desc.Options(), annotations.E_Http).(*annotations.HttpRule)
					if rule != nil && ok {
						for _, bind := range rule.AdditionalBindings {
							sd.Methods = append(sd.Methods, buildHTTPRule(&HTTPRuleData{
								GeneratedFile: g,
								ServerIndex:   serverIndex,
								MethodIndex:   methodIndex,
								Service:       service,
								Method:        method,
								Rule:          bind,
							}))
						}
						sd.Methods = append(sd.Methods, buildHTTPRule(&HTTPRuleData{
							GeneratedFile: g,
							ServerIndex:   serverIndex,
							MethodIndex:   methodIndex,
							Service:       service,
							Method:        method,
							Rule:          rule,
						}))

					} else if omitemptyPrefix != "" {
						path := fmt.Sprintf("%s/%s/%s", omitemptyPrefix, service.Desc.FullName(), method.Desc.Name())
						sd.Methods = append(sd.Methods, buildMethodDesc(&MethodDescReq{
							GeneratedFile: g,
							Method:        method,
							MethodType:    http.MethodGet,
							Path:          path,
							MethodIndex:   methodIndex,
							ServerIndex:   serverIndex,
						}))
					}
				}
				serverContent := sd.execute()
				g.P(serverContent)
			}
		}
		return nil
	})
}
