// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/test/v1/category.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CategoryListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CategoryListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CategoryListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CategoryListRequestMultiError, or nil if none found.
func (m *CategoryListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CategoryListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Page

	// no validation rules for PageSize

	// no validation rules for Name

	// no validation rules for EName

	// no validation rules for Status

	// no validation rules for DomainId

	// no validation rules for TemplateId

	if len(errors) > 0 {
		return CategoryListRequestMultiError(errors)
	}

	return nil
}

// CategoryListRequestMultiError is an error wrapping multiple validation
// errors returned by CategoryListRequest.ValidateAll() if the designated
// constraints aren't met.
type CategoryListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CategoryListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CategoryListRequestMultiError) AllErrors() []error { return m }

// CategoryListRequestValidationError is the validation error returned by
// CategoryListRequest.Validate if the designated constraints aren't met.
type CategoryListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CategoryListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CategoryListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CategoryListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CategoryListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CategoryListRequestValidationError) ErrorName() string {
	return "CategoryListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CategoryListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCategoryListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CategoryListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CategoryListRequestValidationError{}

// Validate checks the field values on CategoryListReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CategoryListReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CategoryListReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CategoryListReplyMultiError, or nil if none found.
func (m *CategoryListReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CategoryListReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Count

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CategoryListReplyValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CategoryListReplyValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CategoryListReplyValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CategoryListReplyMultiError(errors)
	}

	return nil
}

// CategoryListReplyMultiError is an error wrapping multiple validation errors
// returned by CategoryListReply.ValidateAll() if the designated constraints
// aren't met.
type CategoryListReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CategoryListReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CategoryListReplyMultiError) AllErrors() []error { return m }

// CategoryListReplyValidationError is the validation error returned by
// CategoryListReply.Validate if the designated constraints aren't met.
type CategoryListReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CategoryListReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CategoryListReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CategoryListReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CategoryListReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CategoryListReplyValidationError) ErrorName() string {
	return "CategoryListReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CategoryListReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCategoryListReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CategoryListReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CategoryListReplyValidationError{}

// Validate checks the field values on CategoryItem with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CategoryItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CategoryItem with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CategoryItemMultiError, or
// nil if none found.
func (m *CategoryItem) ValidateAll() error {
	return m.validate(true)
}

func (m *CategoryItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for EName

	// no validation rules for DomainId

	// no validation rules for TemplateId

	// no validation rules for AutoList

	// no validation rules for IsAutomatic

	// no validation rules for AutoContent

	// no validation rules for Remark

	// no validation rules for Image

	// no validation rules for Sort

	// no validation rules for Status

	// no validation rules for BaiduVerify

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	if len(errors) > 0 {
		return CategoryItemMultiError(errors)
	}

	return nil
}

// CategoryItemMultiError is an error wrapping multiple validation errors
// returned by CategoryItem.ValidateAll() if the designated constraints aren't met.
type CategoryItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CategoryItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CategoryItemMultiError) AllErrors() []error { return m }

// CategoryItemValidationError is the validation error returned by
// CategoryItem.Validate if the designated constraints aren't met.
type CategoryItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CategoryItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CategoryItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CategoryItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CategoryItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CategoryItemValidationError) ErrorName() string { return "CategoryItemValidationError" }

// Error satisfies the builtin error interface
func (e CategoryItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCategoryItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CategoryItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CategoryItemValidationError{}

// Validate checks the field values on CategoryAddRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CategoryAddRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CategoryAddRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CategoryAddRequestMultiError, or nil if none found.
func (m *CategoryAddRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CategoryAddRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetName()); l < 1 || l > 100 {
		err := CategoryAddRequestValidationError{
			field:  "Name",
			reason: "value length must be between 1 and 100 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetEName()); l < 1 || l > 100 {
		err := CategoryAddRequestValidationError{
			field:  "EName",
			reason: "value length must be between 1 and 100 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetDomainId() < 0 {
		err := CategoryAddRequestValidationError{
			field:  "DomainId",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetTemplateId() < 0 {
		err := CategoryAddRequestValidationError{
			field:  "TemplateId",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetAutoList() < 0 {
		err := CategoryAddRequestValidationError{
			field:  "AutoList",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetIsAutomatic() < 0 {
		err := CategoryAddRequestValidationError{
			field:  "IsAutomatic",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetAutoContent() < 0 {
		err := CategoryAddRequestValidationError{
			field:  "AutoContent",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Remark

	// no validation rules for Image

	if m.GetSort() < 0 {
		err := CategoryAddRequestValidationError{
			field:  "Sort",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetStatus() < 0 {
		err := CategoryAddRequestValidationError{
			field:  "Status",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for BaiduVerify

	if len(errors) > 0 {
		return CategoryAddRequestMultiError(errors)
	}

	return nil
}

// CategoryAddRequestMultiError is an error wrapping multiple validation errors
// returned by CategoryAddRequest.ValidateAll() if the designated constraints
// aren't met.
type CategoryAddRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CategoryAddRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CategoryAddRequestMultiError) AllErrors() []error { return m }

// CategoryAddRequestValidationError is the validation error returned by
// CategoryAddRequest.Validate if the designated constraints aren't met.
type CategoryAddRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CategoryAddRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CategoryAddRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CategoryAddRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CategoryAddRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CategoryAddRequestValidationError) ErrorName() string {
	return "CategoryAddRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CategoryAddRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCategoryAddRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CategoryAddRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CategoryAddRequestValidationError{}

// Validate checks the field values on CategoryUpdateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CategoryUpdateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CategoryUpdateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CategoryUpdateRequestMultiError, or nil if none found.
func (m *CategoryUpdateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CategoryUpdateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() < 0 {
		err := CategoryUpdateRequestValidationError{
			field:  "Id",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetName()); l < 1 || l > 100 {
		err := CategoryUpdateRequestValidationError{
			field:  "Name",
			reason: "value length must be between 1 and 100 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetEName()); l < 1 || l > 100 {
		err := CategoryUpdateRequestValidationError{
			field:  "EName",
			reason: "value length must be between 1 and 100 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetDomainId() < 0 {
		err := CategoryUpdateRequestValidationError{
			field:  "DomainId",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetTemplateId() < 0 {
		err := CategoryUpdateRequestValidationError{
			field:  "TemplateId",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetAutoList() < 0 {
		err := CategoryUpdateRequestValidationError{
			field:  "AutoList",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetIsAutomatic() < 0 {
		err := CategoryUpdateRequestValidationError{
			field:  "IsAutomatic",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetAutoContent() < 0 {
		err := CategoryUpdateRequestValidationError{
			field:  "AutoContent",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Remark

	// no validation rules for Image

	if m.GetSort() < 0 {
		err := CategoryUpdateRequestValidationError{
			field:  "Sort",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetStatus() < 0 {
		err := CategoryUpdateRequestValidationError{
			field:  "Status",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for BaiduVerify

	if len(errors) > 0 {
		return CategoryUpdateRequestMultiError(errors)
	}

	return nil
}

// CategoryUpdateRequestMultiError is an error wrapping multiple validation
// errors returned by CategoryUpdateRequest.ValidateAll() if the designated
// constraints aren't met.
type CategoryUpdateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CategoryUpdateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CategoryUpdateRequestMultiError) AllErrors() []error { return m }

// CategoryUpdateRequestValidationError is the validation error returned by
// CategoryUpdateRequest.Validate if the designated constraints aren't met.
type CategoryUpdateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CategoryUpdateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CategoryUpdateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CategoryUpdateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CategoryUpdateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CategoryUpdateRequestValidationError) ErrorName() string {
	return "CategoryUpdateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CategoryUpdateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCategoryUpdateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CategoryUpdateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CategoryUpdateRequestValidationError{}

// Validate checks the field values on CategoryDeleteRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CategoryDeleteRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CategoryDeleteRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CategoryDeleteRequestMultiError, or nil if none found.
func (m *CategoryDeleteRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CategoryDeleteRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(m.GetId()) < 1 {
		err := CategoryDeleteRequestValidationError{
			field:  "Id",
			reason: "value must contain at least 1 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetId() {
		_, _ = idx, item

		if item <= 0 {
			err := CategoryDeleteRequestValidationError{
				field:  fmt.Sprintf("Id[%v]", idx),
				reason: "value must be greater than 0",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return CategoryDeleteRequestMultiError(errors)
	}

	return nil
}

// CategoryDeleteRequestMultiError is an error wrapping multiple validation
// errors returned by CategoryDeleteRequest.ValidateAll() if the designated
// constraints aren't met.
type CategoryDeleteRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CategoryDeleteRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CategoryDeleteRequestMultiError) AllErrors() []error { return m }

// CategoryDeleteRequestValidationError is the validation error returned by
// CategoryDeleteRequest.Validate if the designated constraints aren't met.
type CategoryDeleteRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CategoryDeleteRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CategoryDeleteRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CategoryDeleteRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CategoryDeleteRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CategoryDeleteRequestValidationError) ErrorName() string {
	return "CategoryDeleteRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CategoryDeleteRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCategoryDeleteRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CategoryDeleteRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CategoryDeleteRequestValidationError{}

// Validate checks the field values on CategoryContentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CategoryContentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CategoryContentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CategoryContentRequestMultiError, or nil if none found.
func (m *CategoryContentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CategoryContentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() < 0 {
		err := CategoryContentRequestValidationError{
			field:  "Id",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CategoryContentRequestMultiError(errors)
	}

	return nil
}

// CategoryContentRequestMultiError is an error wrapping multiple validation
// errors returned by CategoryContentRequest.ValidateAll() if the designated
// constraints aren't met.
type CategoryContentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CategoryContentRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CategoryContentRequestMultiError) AllErrors() []error { return m }

// CategoryContentRequestValidationError is the validation error returned by
// CategoryContentRequest.Validate if the designated constraints aren't met.
type CategoryContentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CategoryContentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CategoryContentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CategoryContentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CategoryContentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CategoryContentRequestValidationError) ErrorName() string {
	return "CategoryContentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CategoryContentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCategoryContentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CategoryContentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CategoryContentRequestValidationError{}

// Validate checks the field values on CategoryContentReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CategoryContentReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CategoryContentReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CategoryContentReplyMultiError, or nil if none found.
func (m *CategoryContentReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CategoryContentReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetItem()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CategoryContentReplyValidationError{
					field:  "Item",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CategoryContentReplyValidationError{
					field:  "Item",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetItem()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CategoryContentReplyValidationError{
				field:  "Item",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CategoryContentReplyMultiError(errors)
	}

	return nil
}

// CategoryContentReplyMultiError is an error wrapping multiple validation
// errors returned by CategoryContentReply.ValidateAll() if the designated
// constraints aren't met.
type CategoryContentReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CategoryContentReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CategoryContentReplyMultiError) AllErrors() []error { return m }

// CategoryContentReplyValidationError is the validation error returned by
// CategoryContentReply.Validate if the designated constraints aren't met.
type CategoryContentReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CategoryContentReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CategoryContentReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CategoryContentReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CategoryContentReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CategoryContentReplyValidationError) ErrorName() string {
	return "CategoryContentReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CategoryContentReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCategoryContentReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CategoryContentReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CategoryContentReplyValidationError{}
