// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.15.8
// source: api/test/v1/test.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TestClient is the client API for Test service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TestClient interface {
	Info(ctx context.Context, in *GetTestRequest, opts ...grpc.CallOption) (*GetTestReply, error)
	List(ctx context.Context, in *GetListTestRequest, opts ...grpc.CallOption) (*GetTestReply, error)
	// 创建
	Create(ctx context.Context, in *GetTestRequest, opts ...grpc.CallOption) (*GetTestReply, error)
}

type testClient struct {
	cc grpc.ClientConnInterface
}

func NewTestClient(cc grpc.ClientConnInterface) TestClient {
	return &testClient{cc}
}

func (c *testClient) Info(ctx context.Context, in *GetTestRequest, opts ...grpc.CallOption) (*GetTestReply, error) {
	out := new(GetTestReply)
	err := c.cc.Invoke(ctx, "/api.test.v1.Test/Info", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testClient) List(ctx context.Context, in *GetListTestRequest, opts ...grpc.CallOption) (*GetTestReply, error) {
	out := new(GetTestReply)
	err := c.cc.Invoke(ctx, "/api.test.v1.Test/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testClient) Create(ctx context.Context, in *GetTestRequest, opts ...grpc.CallOption) (*GetTestReply, error) {
	out := new(GetTestReply)
	err := c.cc.Invoke(ctx, "/api.test.v1.Test/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TestServer is the server API for Test service.
// All implementations must embed UnimplementedTestServer
// for forward compatibility
type TestServer interface {
	Info(context.Context, *GetTestRequest) (*GetTestReply, error)
	List(context.Context, *GetListTestRequest) (*GetTestReply, error)
	// 创建
	Create(context.Context, *GetTestRequest) (*GetTestReply, error)
	mustEmbedUnimplementedTestServer()
}

// UnimplementedTestServer must be embedded to have forward compatible implementations.
type UnimplementedTestServer struct {
}

func (UnimplementedTestServer) Info(context.Context, *GetTestRequest) (*GetTestReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Info not implemented")
}
func (UnimplementedTestServer) List(context.Context, *GetListTestRequest) (*GetTestReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedTestServer) Create(context.Context, *GetTestRequest) (*GetTestReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedTestServer) mustEmbedUnimplementedTestServer() {}

// UnsafeTestServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TestServer will
// result in compilation errors.
type UnsafeTestServer interface {
	mustEmbedUnimplementedTestServer()
}

func RegisterTestServer(s grpc.ServiceRegistrar, srv TestServer) {
	s.RegisterService(&Test_ServiceDesc, srv)
}

func _Test_Info_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestServer).Info(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.test.v1.Test/Info",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestServer).Info(ctx, req.(*GetTestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Test_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListTestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.test.v1.Test/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestServer).List(ctx, req.(*GetListTestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Test_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.test.v1.Test/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestServer).Create(ctx, req.(*GetTestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Test_ServiceDesc is the grpc.ServiceDesc for Test service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Test_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.test.v1.Test",
	HandlerType: (*TestServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Info",
			Handler:    _Test_Info_Handler,
		},
		{
			MethodName: "List",
			Handler:    _Test_List_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _Test_Create_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/test/v1/test.proto",
}
