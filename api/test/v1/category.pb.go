// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.15.8
// source: api/test/v1/category.proto

package v1

import (
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	empty "github.com/golang/protobuf/ptypes/empty"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CategoryInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *CategoryInfoRequest) Reset() {
	*x = CategoryInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_test_v1_category_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CategoryInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CategoryInfoRequest) ProtoMessage() {}

func (x *CategoryInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_test_v1_category_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CategoryInfoRequest.ProtoReflect.Descriptor instead.
func (*CategoryInfoRequest) Descriptor() ([]byte, []int) {
	return file_api_test_v1_category_proto_rawDescGZIP(), []int{0}
}

func (x *CategoryInfoRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type CategoryInfoReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Item *CategoryItem `protobuf:"bytes,1,opt,name=item,proto3" json:"item,omitempty"`
}

func (x *CategoryInfoReply) Reset() {
	*x = CategoryInfoReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_test_v1_category_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CategoryInfoReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CategoryInfoReply) ProtoMessage() {}

func (x *CategoryInfoReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_test_v1_category_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CategoryInfoReply.ProtoReflect.Descriptor instead.
func (*CategoryInfoReply) Descriptor() ([]byte, []int) {
	return file_api_test_v1_category_proto_rawDescGZIP(), []int{1}
}

func (x *CategoryInfoReply) GetItem() *CategoryItem {
	if x != nil {
		return x.Item
	}
	return nil
}

type CategoryStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Status int32 `protobuf:"varint,2,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *CategoryStatusRequest) Reset() {
	*x = CategoryStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_test_v1_category_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CategoryStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CategoryStatusRequest) ProtoMessage() {}

func (x *CategoryStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_test_v1_category_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CategoryStatusRequest.ProtoReflect.Descriptor instead.
func (*CategoryStatusRequest) Descriptor() ([]byte, []int) {
	return file_api_test_v1_category_proto_rawDescGZIP(), []int{2}
}

func (x *CategoryStatusRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CategoryStatusRequest) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

type CategoryDB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name        string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	EName       string `protobuf:"bytes,3,opt,name=eName,proto3" json:"eName,omitempty"`
	DomainId    int32  `protobuf:"varint,4,opt,name=domainId,proto3" json:"domainId,omitempty"`
	TemplateId  int32  `protobuf:"varint,5,opt,name=templateId,proto3" json:"templateId,omitempty"`
	AutoList    int32  `protobuf:"varint,6,opt,name=autoList,proto3" json:"autoList,omitempty"`
	IsAutomatic int32  `protobuf:"varint,7,opt,name=isAutomatic,proto3" json:"isAutomatic,omitempty"`
	AutoContent int32  `protobuf:"varint,8,opt,name=autoContent,proto3" json:"autoContent,omitempty"`
	Remark      string `protobuf:"bytes,9,opt,name=remark,proto3" json:"remark,omitempty"`
	Image       string `protobuf:"bytes,10,opt,name=image,proto3" json:"image,omitempty"`
	Sort        int32  `protobuf:"varint,11,opt,name=sort,proto3" json:"sort,omitempty"`
	Status      int32  `protobuf:"varint,12,opt,name=status,proto3" json:"status,omitempty"`
	BaiduVerify string `protobuf:"bytes,13,opt,name=baiduVerify,proto3" json:"baiduVerify,omitempty"`
	CreatedAt   int32  `protobuf:"varint,14,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	UpdatedAt   int32  `protobuf:"varint,15,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
}

func (x *CategoryDB) Reset() {
	*x = CategoryDB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_test_v1_category_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CategoryDB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CategoryDB) ProtoMessage() {}

func (x *CategoryDB) ProtoReflect() protoreflect.Message {
	mi := &file_api_test_v1_category_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CategoryDB.ProtoReflect.Descriptor instead.
func (*CategoryDB) Descriptor() ([]byte, []int) {
	return file_api_test_v1_category_proto_rawDescGZIP(), []int{3}
}

func (x *CategoryDB) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CategoryDB) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CategoryDB) GetEName() string {
	if x != nil {
		return x.EName
	}
	return ""
}

func (x *CategoryDB) GetDomainId() int32 {
	if x != nil {
		return x.DomainId
	}
	return 0
}

func (x *CategoryDB) GetTemplateId() int32 {
	if x != nil {
		return x.TemplateId
	}
	return 0
}

func (x *CategoryDB) GetAutoList() int32 {
	if x != nil {
		return x.AutoList
	}
	return 0
}

func (x *CategoryDB) GetIsAutomatic() int32 {
	if x != nil {
		return x.IsAutomatic
	}
	return 0
}

func (x *CategoryDB) GetAutoContent() int32 {
	if x != nil {
		return x.AutoContent
	}
	return 0
}

func (x *CategoryDB) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *CategoryDB) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

func (x *CategoryDB) GetSort() int32 {
	if x != nil {
		return x.Sort
	}
	return 0
}

func (x *CategoryDB) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *CategoryDB) GetBaiduVerify() string {
	if x != nil {
		return x.BaiduVerify
	}
	return ""
}

func (x *CategoryDB) GetCreatedAt() int32 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *CategoryDB) GetUpdatedAt() int32 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

type CategoryListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page       int32            `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	PageSize   int32            `protobuf:"varint,2,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
	Name       string           `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	EName      string           `protobuf:"bytes,4,opt,name=eName,proto3" json:"eName,omitempty"`
	Status     int32            `protobuf:"varint,5,opt,name=status,proto3" json:"status,omitempty"`
	DomainId   int32            `protobuf:"varint,6,opt,name=domainId,proto3" json:"domainId,omitempty"`
	TemplateId int32            `protobuf:"varint,7,opt,name=templateId,proto3" json:"templateId,omitempty"`
	Id         []int32          `protobuf:"varint,8,rep,packed,name=id,proto3" json:"id,omitempty"`
	Content    *CategoryContent `protobuf:"bytes,9,opt,name=content,proto3" json:"content,omitempty"`
	UserInfos  []*UserInfo      `protobuf:"bytes,10,rep,name=userInfos,proto3" json:"userInfos,omitempty"`
}

func (x *CategoryListRequest) Reset() {
	*x = CategoryListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_test_v1_category_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CategoryListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CategoryListRequest) ProtoMessage() {}

func (x *CategoryListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_test_v1_category_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CategoryListRequest.ProtoReflect.Descriptor instead.
func (*CategoryListRequest) Descriptor() ([]byte, []int) {
	return file_api_test_v1_category_proto_rawDescGZIP(), []int{4}
}

func (x *CategoryListRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *CategoryListRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *CategoryListRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CategoryListRequest) GetEName() string {
	if x != nil {
		return x.EName
	}
	return ""
}

func (x *CategoryListRequest) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *CategoryListRequest) GetDomainId() int32 {
	if x != nil {
		return x.DomainId
	}
	return 0
}

func (x *CategoryListRequest) GetTemplateId() int32 {
	if x != nil {
		return x.TemplateId
	}
	return 0
}

func (x *CategoryListRequest) GetId() []int32 {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *CategoryListRequest) GetContent() *CategoryContent {
	if x != nil {
		return x.Content
	}
	return nil
}

func (x *CategoryListRequest) GetUserInfos() []*UserInfo {
	if x != nil {
		return x.UserInfos
	}
	return nil
}

type CategoryContent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name     string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	EName    string `protobuf:"bytes,2,opt,name=eName,proto3" json:"eName,omitempty"`
	DomainId int32  `protobuf:"varint,3,opt,name=domainId,proto3" json:"domainId,omitempty"`
}

func (x *CategoryContent) Reset() {
	*x = CategoryContent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_test_v1_category_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CategoryContent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CategoryContent) ProtoMessage() {}

func (x *CategoryContent) ProtoReflect() protoreflect.Message {
	mi := &file_api_test_v1_category_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CategoryContent.ProtoReflect.Descriptor instead.
func (*CategoryContent) Descriptor() ([]byte, []int) {
	return file_api_test_v1_category_proto_rawDescGZIP(), []int{5}
}

func (x *CategoryContent) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CategoryContent) GetEName() string {
	if x != nil {
		return x.EName
	}
	return ""
}

func (x *CategoryContent) GetDomainId() int32 {
	if x != nil {
		return x.DomainId
	}
	return 0
}

type UserInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name       string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	EName      string `protobuf:"bytes,3,opt,name=eName,proto3" json:"eName,omitempty"`
	DomainId   int32  `protobuf:"varint,4,opt,name=domainId,proto3" json:"domainId,omitempty"`
	TemplateId int32  `protobuf:"varint,5,opt,name=templateId,proto3" json:"templateId,omitempty"`
	AutoList   int32  `protobuf:"varint,6,opt,name=autoList,proto3" json:"autoList,omitempty"`
}

func (x *UserInfo) Reset() {
	*x = UserInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_test_v1_category_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserInfo) ProtoMessage() {}

func (x *UserInfo) ProtoReflect() protoreflect.Message {
	mi := &file_api_test_v1_category_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserInfo.ProtoReflect.Descriptor instead.
func (*UserInfo) Descriptor() ([]byte, []int) {
	return file_api_test_v1_category_proto_rawDescGZIP(), []int{6}
}

func (x *UserInfo) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UserInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UserInfo) GetEName() string {
	if x != nil {
		return x.EName
	}
	return ""
}

func (x *UserInfo) GetDomainId() int32 {
	if x != nil {
		return x.DomainId
	}
	return 0
}

func (x *UserInfo) GetTemplateId() int32 {
	if x != nil {
		return x.TemplateId
	}
	return 0
}

func (x *UserInfo) GetAutoList() int32 {
	if x != nil {
		return x.AutoList
	}
	return 0
}

type CategoryListReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count int32           `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	Items []*CategoryItem `protobuf:"bytes,2,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *CategoryListReply) Reset() {
	*x = CategoryListReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_test_v1_category_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CategoryListReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CategoryListReply) ProtoMessage() {}

func (x *CategoryListReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_test_v1_category_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CategoryListReply.ProtoReflect.Descriptor instead.
func (*CategoryListReply) Descriptor() ([]byte, []int) {
	return file_api_test_v1_category_proto_rawDescGZIP(), []int{7}
}

func (x *CategoryListReply) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *CategoryListReply) GetItems() []*CategoryItem {
	if x != nil {
		return x.Items
	}
	return nil
}

type CategoryInfoListReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Item []*CategoryItem `protobuf:"bytes,2,rep,name=item,proto3" json:"item,omitempty"`
}

func (x *CategoryInfoListReply) Reset() {
	*x = CategoryInfoListReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_test_v1_category_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CategoryInfoListReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CategoryInfoListReply) ProtoMessage() {}

func (x *CategoryInfoListReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_test_v1_category_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CategoryInfoListReply.ProtoReflect.Descriptor instead.
func (*CategoryInfoListReply) Descriptor() ([]byte, []int) {
	return file_api_test_v1_category_proto_rawDescGZIP(), []int{8}
}

func (x *CategoryInfoListReply) GetItem() []*CategoryItem {
	if x != nil {
		return x.Item
	}
	return nil
}

type CategoryItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name        string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	EName       string `protobuf:"bytes,3,opt,name=eName,proto3" json:"eName,omitempty"`
	DomainId    int32  `protobuf:"varint,4,opt,name=domainId,proto3" json:"domainId,omitempty"`
	TemplateId  int32  `protobuf:"varint,5,opt,name=templateId,proto3" json:"templateId,omitempty"`
	AutoList    int32  `protobuf:"varint,6,opt,name=autoList,proto3" json:"autoList,omitempty"`
	IsAutomatic int32  `protobuf:"varint,7,opt,name=isAutomatic,proto3" json:"isAutomatic,omitempty"`
	AutoContent int32  `protobuf:"varint,8,opt,name=autoContent,proto3" json:"autoContent,omitempty"`
	Remark      string `protobuf:"bytes,9,opt,name=remark,proto3" json:"remark,omitempty"`
	Image       string `protobuf:"bytes,10,opt,name=image,proto3" json:"image,omitempty"`
	Sort        int32  `protobuf:"varint,11,opt,name=sort,proto3" json:"sort,omitempty"`
	Status      int32  `protobuf:"varint,12,opt,name=status,proto3" json:"status,omitempty"`
	BaiduVerify string `protobuf:"bytes,13,opt,name=baiduVerify,proto3" json:"baiduVerify,omitempty"`
	CreatedAt   int32  `protobuf:"varint,14,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	UpdatedAt   int32  `protobuf:"varint,15,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
}

func (x *CategoryItem) Reset() {
	*x = CategoryItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_test_v1_category_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CategoryItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CategoryItem) ProtoMessage() {}

func (x *CategoryItem) ProtoReflect() protoreflect.Message {
	mi := &file_api_test_v1_category_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CategoryItem.ProtoReflect.Descriptor instead.
func (*CategoryItem) Descriptor() ([]byte, []int) {
	return file_api_test_v1_category_proto_rawDescGZIP(), []int{9}
}

func (x *CategoryItem) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CategoryItem) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CategoryItem) GetEName() string {
	if x != nil {
		return x.EName
	}
	return ""
}

func (x *CategoryItem) GetDomainId() int32 {
	if x != nil {
		return x.DomainId
	}
	return 0
}

func (x *CategoryItem) GetTemplateId() int32 {
	if x != nil {
		return x.TemplateId
	}
	return 0
}

func (x *CategoryItem) GetAutoList() int32 {
	if x != nil {
		return x.AutoList
	}
	return 0
}

func (x *CategoryItem) GetIsAutomatic() int32 {
	if x != nil {
		return x.IsAutomatic
	}
	return 0
}

func (x *CategoryItem) GetAutoContent() int32 {
	if x != nil {
		return x.AutoContent
	}
	return 0
}

func (x *CategoryItem) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *CategoryItem) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

func (x *CategoryItem) GetSort() int32 {
	if x != nil {
		return x.Sort
	}
	return 0
}

func (x *CategoryItem) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *CategoryItem) GetBaiduVerify() string {
	if x != nil {
		return x.BaiduVerify
	}
	return ""
}

func (x *CategoryItem) GetCreatedAt() int32 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *CategoryItem) GetUpdatedAt() int32 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

type CategoryAddRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	EName       string `protobuf:"bytes,2,opt,name=eName,proto3" json:"eName,omitempty"`
	DomainId    int32  `protobuf:"varint,3,opt,name=domainId,proto3" json:"domainId,omitempty"`
	TemplateId  int32  `protobuf:"varint,4,opt,name=templateId,proto3" json:"templateId,omitempty"`
	AutoList    int32  `protobuf:"varint,5,opt,name=autoList,proto3" json:"autoList,omitempty"`
	IsAutomatic int32  `protobuf:"varint,6,opt,name=isAutomatic,proto3" json:"isAutomatic,omitempty"`
	AutoContent int32  `protobuf:"varint,7,opt,name=autoContent,proto3" json:"autoContent,omitempty"`
	Remark      string `protobuf:"bytes,8,opt,name=remark,proto3" json:"remark,omitempty"`
	Image       string `protobuf:"bytes,9,opt,name=image,proto3" json:"image,omitempty"`
	Sort        int32  `protobuf:"varint,10,opt,name=sort,proto3" json:"sort,omitempty"`
	Status      int32  `protobuf:"varint,11,opt,name=status,proto3" json:"status,omitempty"`
	BaiduVerify string `protobuf:"bytes,12,opt,name=baiduVerify,proto3" json:"baiduVerify,omitempty"`
}

func (x *CategoryAddRequest) Reset() {
	*x = CategoryAddRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_test_v1_category_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CategoryAddRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CategoryAddRequest) ProtoMessage() {}

func (x *CategoryAddRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_test_v1_category_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CategoryAddRequest.ProtoReflect.Descriptor instead.
func (*CategoryAddRequest) Descriptor() ([]byte, []int) {
	return file_api_test_v1_category_proto_rawDescGZIP(), []int{10}
}

func (x *CategoryAddRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CategoryAddRequest) GetEName() string {
	if x != nil {
		return x.EName
	}
	return ""
}

func (x *CategoryAddRequest) GetDomainId() int32 {
	if x != nil {
		return x.DomainId
	}
	return 0
}

func (x *CategoryAddRequest) GetTemplateId() int32 {
	if x != nil {
		return x.TemplateId
	}
	return 0
}

func (x *CategoryAddRequest) GetAutoList() int32 {
	if x != nil {
		return x.AutoList
	}
	return 0
}

func (x *CategoryAddRequest) GetIsAutomatic() int32 {
	if x != nil {
		return x.IsAutomatic
	}
	return 0
}

func (x *CategoryAddRequest) GetAutoContent() int32 {
	if x != nil {
		return x.AutoContent
	}
	return 0
}

func (x *CategoryAddRequest) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *CategoryAddRequest) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

func (x *CategoryAddRequest) GetSort() int32 {
	if x != nil {
		return x.Sort
	}
	return 0
}

func (x *CategoryAddRequest) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *CategoryAddRequest) GetBaiduVerify() string {
	if x != nil {
		return x.BaiduVerify
	}
	return ""
}

type CategoryUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name        string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	EName       string `protobuf:"bytes,3,opt,name=eName,proto3" json:"eName,omitempty"`
	DomainId    int32  `protobuf:"varint,4,opt,name=domainId,proto3" json:"domainId,omitempty"`
	TemplateId  int32  `protobuf:"varint,5,opt,name=templateId,proto3" json:"templateId,omitempty"`
	AutoList    int32  `protobuf:"varint,6,opt,name=autoList,proto3" json:"autoList,omitempty"`
	IsAutomatic int32  `protobuf:"varint,7,opt,name=isAutomatic,proto3" json:"isAutomatic,omitempty"`
	AutoContent int32  `protobuf:"varint,8,opt,name=autoContent,proto3" json:"autoContent,omitempty"`
	Remark      string `protobuf:"bytes,9,opt,name=remark,proto3" json:"remark,omitempty"`
	Image       string `protobuf:"bytes,10,opt,name=image,proto3" json:"image,omitempty"`
	Sort        int32  `protobuf:"varint,11,opt,name=sort,proto3" json:"sort,omitempty"`
	Status      int32  `protobuf:"varint,12,opt,name=status,proto3" json:"status,omitempty"`
	BaiduVerify string `protobuf:"bytes,13,opt,name=baiduVerify,proto3" json:"baiduVerify,omitempty"`
}

func (x *CategoryUpdateRequest) Reset() {
	*x = CategoryUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_test_v1_category_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CategoryUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CategoryUpdateRequest) ProtoMessage() {}

func (x *CategoryUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_test_v1_category_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CategoryUpdateRequest.ProtoReflect.Descriptor instead.
func (*CategoryUpdateRequest) Descriptor() ([]byte, []int) {
	return file_api_test_v1_category_proto_rawDescGZIP(), []int{11}
}

func (x *CategoryUpdateRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CategoryUpdateRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CategoryUpdateRequest) GetEName() string {
	if x != nil {
		return x.EName
	}
	return ""
}

func (x *CategoryUpdateRequest) GetDomainId() int32 {
	if x != nil {
		return x.DomainId
	}
	return 0
}

func (x *CategoryUpdateRequest) GetTemplateId() int32 {
	if x != nil {
		return x.TemplateId
	}
	return 0
}

func (x *CategoryUpdateRequest) GetAutoList() int32 {
	if x != nil {
		return x.AutoList
	}
	return 0
}

func (x *CategoryUpdateRequest) GetIsAutomatic() int32 {
	if x != nil {
		return x.IsAutomatic
	}
	return 0
}

func (x *CategoryUpdateRequest) GetAutoContent() int32 {
	if x != nil {
		return x.AutoContent
	}
	return 0
}

func (x *CategoryUpdateRequest) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *CategoryUpdateRequest) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

func (x *CategoryUpdateRequest) GetSort() int32 {
	if x != nil {
		return x.Sort
	}
	return 0
}

func (x *CategoryUpdateRequest) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *CategoryUpdateRequest) GetBaiduVerify() string {
	if x != nil {
		return x.BaiduVerify
	}
	return ""
}

type CategoryDeleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id []int32 `protobuf:"varint,1,rep,packed,name=id,proto3" json:"id,omitempty"`
}

func (x *CategoryDeleteRequest) Reset() {
	*x = CategoryDeleteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_test_v1_category_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CategoryDeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CategoryDeleteRequest) ProtoMessage() {}

func (x *CategoryDeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_test_v1_category_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CategoryDeleteRequest.ProtoReflect.Descriptor instead.
func (*CategoryDeleteRequest) Descriptor() ([]byte, []int) {
	return file_api_test_v1_category_proto_rawDescGZIP(), []int{12}
}

func (x *CategoryDeleteRequest) GetId() []int32 {
	if x != nil {
		return x.Id
	}
	return nil
}

type CategoryContentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *CategoryContentRequest) Reset() {
	*x = CategoryContentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_test_v1_category_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CategoryContentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CategoryContentRequest) ProtoMessage() {}

func (x *CategoryContentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_test_v1_category_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CategoryContentRequest.ProtoReflect.Descriptor instead.
func (*CategoryContentRequest) Descriptor() ([]byte, []int) {
	return file_api_test_v1_category_proto_rawDescGZIP(), []int{13}
}

func (x *CategoryContentRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type CategoryContentReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Item *CategoryItem `protobuf:"bytes,3,opt,name=item,proto3" json:"item,omitempty"`
}

func (x *CategoryContentReply) Reset() {
	*x = CategoryContentReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_test_v1_category_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CategoryContentReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CategoryContentReply) ProtoMessage() {}

func (x *CategoryContentReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_test_v1_category_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CategoryContentReply.ProtoReflect.Descriptor instead.
func (*CategoryContentReply) Descriptor() ([]byte, []int) {
	return file_api_test_v1_category_proto_rawDescGZIP(), []int{14}
}

func (x *CategoryContentReply) GetItem() *CategoryItem {
	if x != nil {
		return x.Item
	}
	return nil
}

var File_api_test_v1_category_proto protoreflect.FileDescriptor

var file_api_test_v1_category_proto_rawDesc = []byte{
	0x0a, 0x1a, 0x61, 0x70, 0x69, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x61, 0x70,
	0x69, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x30, 0x0a,
	0x13, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x42, 0x09, 0xfa, 0x42, 0x06, 0x1a, 0x04, 0x28, 0x00, 0x50, 0x01, 0x52, 0x02, 0x69, 0x64, 0x22,
	0x42, 0x0a, 0x11, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x12, 0x2d, 0x0a, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x04, 0x69,
	0x74, 0x65, 0x6d, 0x22, 0x55, 0x0a, 0x15, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x09, 0xfa, 0x42, 0x06, 0x1a, 0x04, 0x28,
	0x00, 0x50, 0x01, 0x52, 0x02, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x09, 0xfa, 0x42, 0x06, 0x1a, 0x04, 0x30, 0x01,
	0x30, 0x02, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x9a, 0x03, 0x0a, 0x0a, 0x43,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x44, 0x42, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x12,
	0x1e, 0x0a, 0x0a, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x61, 0x75, 0x74, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x61, 0x75, 0x74, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x69,
	0x73, 0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0b, 0x69, 0x73, 0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x12, 0x20, 0x0a,
	0x0b, 0x61, 0x75, 0x74, 0x6f, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0b, 0x61, 0x75, 0x74, 0x6f, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x6f, 0x72,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x62, 0x61, 0x69,
	0x64, 0x75, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x62, 0x61, 0x69, 0x64, 0x75, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0xf9, 0x02, 0x0a, 0x13, 0x43, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70,
	0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12,
	0x1c, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xfa,
	0x42, 0x05, 0x72, 0x03, 0xe0, 0x01, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a,
	0x05, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xfa, 0x42,
	0x05, 0x72, 0x03, 0xe0, 0x01, 0x09, 0x52, 0x05, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x42, 0x07, 0xfa,
	0x42, 0x04, 0x1a, 0x02, 0x50, 0x02, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x23,
	0x0a, 0x08, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05,
	0x42, 0x07, 0xfa, 0x42, 0x04, 0x1a, 0x02, 0x50, 0x01, 0x52, 0x08, 0x64, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0a, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49,
	0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x1a, 0x02, 0x50, 0x01,
	0x52, 0x0a, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x08, 0x20, 0x03, 0x28, 0x05, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x92, 0x01, 0x02,
	0x38, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x36, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x74, 0x65,
	0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x33,
	0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x73, 0x22, 0x57, 0x0a, 0x0f, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x22, 0x9c, 0x01, 0x0a,
	0x08, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x12,
	0x1e, 0x0a, 0x0a, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x61, 0x75, 0x74, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x61, 0x75, 0x74, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x5a, 0x0a, 0x11, 0x43,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2f, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x74, 0x65, 0x73, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x74, 0x65, 0x6d,
	0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x46, 0x0a, 0x15, 0x43, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x12, 0x2d, 0x0a, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x22,
	0x9c, 0x03, 0x0a, 0x0c, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x74, 0x65, 0x6d,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x64, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x75, 0x74, 0x6f, 0x4c, 0x69,
	0x73, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x61, 0x75, 0x74, 0x6f, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x73, 0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69,
	0x63, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x69, 0x73, 0x41, 0x75, 0x74, 0x6f, 0x6d,
	0x61, 0x74, 0x69, 0x63, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x75, 0x74, 0x6f, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x61, 0x75, 0x74, 0x6f, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x14,
	0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x20, 0x0a, 0x0b, 0x62, 0x61, 0x69, 0x64, 0x75, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x62, 0x61, 0x69, 0x64, 0x75, 0x56, 0x65, 0x72, 0x69,
	0x66, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x1c, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0xab,
	0x03, 0x0a, 0x12, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x41, 0x64, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x09, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x10, 0x01, 0x18, 0x64, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x05, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x09, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x10, 0x01, 0x18, 0x64, 0x52, 0x05,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x08, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x1a, 0x02, 0x28, 0x00,
	0x52, 0x08, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0a, 0x74, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x42, 0x07,
	0xfa, 0x42, 0x04, 0x1a, 0x02, 0x28, 0x00, 0x52, 0x0a, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x08, 0x61, 0x75, 0x74, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x1a, 0x02, 0x28, 0x00, 0x52, 0x08,
	0x61, 0x75, 0x74, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x0b, 0x69, 0x73, 0x41, 0x75,
	0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x42, 0x07, 0xfa,
	0x42, 0x04, 0x1a, 0x02, 0x28, 0x00, 0x52, 0x0b, 0x69, 0x73, 0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61,
	0x74, 0x69, 0x63, 0x12, 0x29, 0x0a, 0x0b, 0x61, 0x75, 0x74, 0x6f, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x1a, 0x02, 0x28,
	0x00, 0x52, 0x0b, 0x61, 0x75, 0x74, 0x6f, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x04,
	0x73, 0x6f, 0x72, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x1a,
	0x02, 0x28, 0x00, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x12, 0x1f, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x1a, 0x02,
	0x28, 0x00, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x62, 0x61,
	0x69, 0x64, 0x75, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x62, 0x61, 0x69, 0x64, 0x75, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x22, 0xc9, 0x03, 0x0a,
	0x15, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x42, 0x09, 0xfa, 0x42, 0x06, 0x1a, 0x04, 0x28, 0x00, 0x50, 0x01, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x1d, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x09, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x10, 0x01, 0x18, 0x64, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x1f, 0x0a, 0x05, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x09, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x10, 0x01, 0x18, 0x64, 0x52, 0x05, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x23, 0x0a, 0x08, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x1a, 0x02, 0x28, 0x00, 0x52, 0x08, 0x64, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0a, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x1a,
	0x02, 0x28, 0x00, 0x52, 0x0a, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x64, 0x12,
	0x23, 0x0a, 0x08, 0x61, 0x75, 0x74, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x05, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x1a, 0x02, 0x28, 0x00, 0x52, 0x08, 0x61, 0x75, 0x74, 0x6f,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x0b, 0x69, 0x73, 0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61,
	0x74, 0x69, 0x63, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x1a, 0x02,
	0x28, 0x00, 0x52, 0x0b, 0x69, 0x73, 0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x12,
	0x29, 0x0a, 0x0b, 0x61, 0x75, 0x74, 0x6f, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x05, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x1a, 0x02, 0x28, 0x00, 0x52, 0x0b, 0x61,
	0x75, 0x74, 0x6f, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65,
	0x6d, 0x61, 0x72, 0x6b, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61,
	0x72, 0x6b, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x1a, 0x02, 0x28, 0x00, 0x52,
	0x04, 0x73, 0x6f, 0x72, 0x74, 0x12, 0x1f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x05, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x1a, 0x02, 0x28, 0x00, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x62, 0x61, 0x69, 0x64, 0x75, 0x56,
	0x65, 0x72, 0x69, 0x66, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x62, 0x61, 0x69,
	0x64, 0x75, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x22, 0x39, 0x0a, 0x15, 0x43, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x20, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05, 0x42, 0x10, 0xfa,
	0x42, 0x0d, 0x92, 0x01, 0x0a, 0x08, 0x01, 0x22, 0x04, 0x1a, 0x02, 0x20, 0x00, 0x38, 0x03, 0x52,
	0x02, 0x69, 0x64, 0x22, 0x33, 0x0a, 0x16, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x09, 0xfa, 0x42, 0x06, 0x1a, 0x04,
	0x28, 0x00, 0x50, 0x01, 0x52, 0x02, 0x69, 0x64, 0x22, 0x45, 0x0a, 0x14, 0x43, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x12, 0x2d, 0x0a, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x32,
	0xd7, 0x06, 0x0a, 0x08, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x65, 0x0a, 0x04,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x20, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x74, 0x65, 0x73,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x1b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x15, 0x12, 0x11,
	0x2f, 0x76, 0x31, 0x2f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x2f, 0x69, 0x6e, 0x66,
	0x6f, 0x68, 0x04, 0x12, 0x6d, 0x0a, 0x08, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x61, 0x67, 0x65, 0x12,
	0x20, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x22, 0x1f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19, 0x12, 0x15, 0x2f, 0x76, 0x31, 0x2f, 0x63,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x50, 0x61, 0x67, 0x65,
	0x68, 0x06, 0x12, 0x69, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x20, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x22, 0x1b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x15, 0x12, 0x11, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x68, 0x05, 0x12, 0x5d, 0x0a,
	0x03, 0x41, 0x64, 0x64, 0x12, 0x1f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x41, 0x64, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x1d, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x17, 0x22, 0x10, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x2f, 0x61, 0x64, 0x64, 0x3a, 0x01, 0x2a, 0x68, 0x01, 0x12, 0x66, 0x0a, 0x06,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x22, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x74, 0x65, 0x73,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x22, 0x20, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1a, 0x22, 0x13, 0x2f, 0x76, 0x31, 0x2f,
	0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x2f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x3a,
	0x01, 0x2a, 0x68, 0x03, 0x12, 0x66, 0x0a, 0x06, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x22,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x20, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x1a, 0x22, 0x13, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x2f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x3a, 0x01, 0x2a, 0x68, 0x02, 0x12, 0x73, 0x0a, 0x07,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x23, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x74, 0x65,
	0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22,
	0x20, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1a, 0x12, 0x14, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x68, 0x04, 0x70,
	0x02, 0x12, 0x66, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x22, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x20, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1a, 0x22,
	0x13, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x3a, 0x01, 0x2a, 0x68, 0x03, 0x42, 0x2a, 0x5a, 0x28, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x7a, 0x6e, 0x67, 0x75, 0x65, 0x2f, 0x7a, 0x6e,
	0x67, 0x5f, 0x74, 0x6f, 0x6f, 0x6c, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x2f,
	0x76, 0x31, 0x3b, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_api_test_v1_category_proto_rawDescOnce sync.Once
	file_api_test_v1_category_proto_rawDescData = file_api_test_v1_category_proto_rawDesc
)

func file_api_test_v1_category_proto_rawDescGZIP() []byte {
	file_api_test_v1_category_proto_rawDescOnce.Do(func() {
		file_api_test_v1_category_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_test_v1_category_proto_rawDescData)
	})
	return file_api_test_v1_category_proto_rawDescData
}

var file_api_test_v1_category_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_api_test_v1_category_proto_goTypes = []interface{}{
	(*CategoryInfoRequest)(nil),    // 0: api.test.v1.CategoryInfoRequest
	(*CategoryInfoReply)(nil),      // 1: api.test.v1.CategoryInfoReply
	(*CategoryStatusRequest)(nil),  // 2: api.test.v1.CategoryStatusRequest
	(*CategoryDB)(nil),             // 3: api.test.v1.CategoryDB
	(*CategoryListRequest)(nil),    // 4: api.test.v1.CategoryListRequest
	(*CategoryContent)(nil),        // 5: api.test.v1.CategoryContent
	(*UserInfo)(nil),               // 6: api.test.v1.UserInfo
	(*CategoryListReply)(nil),      // 7: api.test.v1.CategoryListReply
	(*CategoryInfoListReply)(nil),  // 8: api.test.v1.CategoryInfoListReply
	(*CategoryItem)(nil),           // 9: api.test.v1.CategoryItem
	(*CategoryAddRequest)(nil),     // 10: api.test.v1.CategoryAddRequest
	(*CategoryUpdateRequest)(nil),  // 11: api.test.v1.CategoryUpdateRequest
	(*CategoryDeleteRequest)(nil),  // 12: api.test.v1.CategoryDeleteRequest
	(*CategoryContentRequest)(nil), // 13: api.test.v1.CategoryContentRequest
	(*CategoryContentReply)(nil),   // 14: api.test.v1.CategoryContentReply
	(*empty.Empty)(nil),            // 15: google.protobuf.Empty
}
var file_api_test_v1_category_proto_depIdxs = []int32{
	9,  // 0: api.test.v1.CategoryInfoReply.item:type_name -> api.test.v1.CategoryItem
	5,  // 1: api.test.v1.CategoryListRequest.content:type_name -> api.test.v1.CategoryContent
	6,  // 2: api.test.v1.CategoryListRequest.userInfos:type_name -> api.test.v1.UserInfo
	9,  // 3: api.test.v1.CategoryListReply.items:type_name -> api.test.v1.CategoryItem
	9,  // 4: api.test.v1.CategoryInfoListReply.item:type_name -> api.test.v1.CategoryItem
	9,  // 5: api.test.v1.CategoryContentReply.item:type_name -> api.test.v1.CategoryItem
	0,  // 6: api.test.v1.Category.Info:input_type -> api.test.v1.CategoryInfoRequest
	4,  // 7: api.test.v1.Category.ListPage:input_type -> api.test.v1.CategoryListRequest
	4,  // 8: api.test.v1.Category.List:input_type -> api.test.v1.CategoryListRequest
	10, // 9: api.test.v1.Category.Add:input_type -> api.test.v1.CategoryAddRequest
	11, // 10: api.test.v1.Category.Update:input_type -> api.test.v1.CategoryUpdateRequest
	12, // 11: api.test.v1.Category.Delete:input_type -> api.test.v1.CategoryDeleteRequest
	13, // 12: api.test.v1.Category.Content:input_type -> api.test.v1.CategoryContentRequest
	2,  // 13: api.test.v1.Category.Status:input_type -> api.test.v1.CategoryStatusRequest
	1,  // 14: api.test.v1.Category.Info:output_type -> api.test.v1.CategoryInfoReply
	7,  // 15: api.test.v1.Category.ListPage:output_type -> api.test.v1.CategoryListReply
	8,  // 16: api.test.v1.Category.List:output_type -> api.test.v1.CategoryInfoListReply
	15, // 17: api.test.v1.Category.Add:output_type -> google.protobuf.Empty
	15, // 18: api.test.v1.Category.Update:output_type -> google.protobuf.Empty
	15, // 19: api.test.v1.Category.Delete:output_type -> google.protobuf.Empty
	14, // 20: api.test.v1.Category.Content:output_type -> api.test.v1.CategoryContentReply
	15, // 21: api.test.v1.Category.Status:output_type -> google.protobuf.Empty
	14, // [14:22] is the sub-list for method output_type
	6,  // [6:14] is the sub-list for method input_type
	6,  // [6:6] is the sub-list for extension type_name
	6,  // [6:6] is the sub-list for extension extendee
	0,  // [0:6] is the sub-list for field type_name
}

func init() { file_api_test_v1_category_proto_init() }
func file_api_test_v1_category_proto_init() {
	if File_api_test_v1_category_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_api_test_v1_category_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CategoryInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_test_v1_category_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CategoryInfoReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_test_v1_category_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CategoryStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_test_v1_category_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CategoryDB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_test_v1_category_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CategoryListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_test_v1_category_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CategoryContent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_test_v1_category_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_test_v1_category_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CategoryListReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_test_v1_category_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CategoryInfoListReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_test_v1_category_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CategoryItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_test_v1_category_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CategoryAddRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_test_v1_category_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CategoryUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_test_v1_category_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CategoryDeleteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_test_v1_category_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CategoryContentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_test_v1_category_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CategoryContentReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_test_v1_category_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_api_test_v1_category_proto_goTypes,
		DependencyIndexes: file_api_test_v1_category_proto_depIdxs,
		MessageInfos:      file_api_test_v1_category_proto_msgTypes,
	}.Build()
	File_api_test_v1_category_proto = out.File
	file_api_test_v1_category_proto_rawDesc = nil
	file_api_test_v1_category_proto_goTypes = nil
	file_api_test_v1_category_proto_depIdxs = nil
}
