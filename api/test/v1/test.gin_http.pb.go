// Code generated by protoc-gen-gin-http. DO NOT EDIT.
package v1

import (
	"github.com/gin-gonic/gin"
	"github.com/zngue/zng_app/pkg/router"
	"github.com/zngue/zng_app/pkg/validate"
)

const OperationGinTestInfo = "api.test.v1.Test.Info"
const OperationGinTestList = "api.test.v1.Test.List"
const OperationGinTestCreate = "api.test.v1.Test.Create"

// 服务接口
type TestGinHttpService interface {
	Info(ctx *gin.Context, req *GetTestRequest) (rs *GetTestReply, err error)
	List(ctx *gin.Context, req *GetListTestRequest) (rs *GetTestReply, err error)
	Create(ctx *gin.Context, req *GetTestRequest) (rs *GetTestReply, err error)
}
type TestGinHttpRouterService struct {
	srv    TestGinHttpService
	router *gin.RouterGroup
}

// 服务注册
func (s *TestGinHttpRouterService) Register() []router.IRouter {
	return router.ApiServiceFn(
		router.ApiGetFn(s.router, "/v1/test/info", s.Info()),
		router.ApiGetFn(s.router, "/v1/test/list", s.List()),
		router.ApiPostFn(s.router, "/v1/test/create", s.Create()),
	)
}
func (s *TestGinHttpRouterService) Info() router.Fn {
	return func(ctx *gin.Context) (rs any, err error) {
		var in *GetTestRequest
		if err = ctx.BindJSON(&in); err != nil {
			return
		}
		err = validate.Validate(in)
		if err != nil {
			return
		}
		ctx.Set("operation", OperationGinTestInfo)
		rs, err = s.srv.Info(ctx, in)
		return
	}
}
func (s *TestGinHttpRouterService) List() router.Fn {
	return func(ctx *gin.Context) (rs any, err error) {
		var in *GetListTestRequest
		if err = ctx.BindJSON(&in); err != nil {
			return
		}
		err = validate.Validate(in)
		if err != nil {
			return
		}
		ctx.Set("operation", OperationGinTestList)
		rs, err = s.srv.List(ctx, in)
		return
	}
}
func (s *TestGinHttpRouterService) Create() router.Fn {
	return func(ctx *gin.Context) (rs any, err error) {
		var in *GetTestRequest
		if err = ctx.ShouldBind(&in); err != nil {
			return
		}
		err = validate.Validate(in)
		if err != nil {
			return
		}
		ctx.Set("operation", OperationGinTestCreate)
		rs, err = s.srv.Create(ctx, in)
		return
	}
}
func NewTestGinHttpRouterService(router *gin.RouterGroup, srv TestGinHttpService) *TestGinHttpRouterService {
	return &TestGinHttpRouterService{
		srv:    srv,
		router: router,
	}
}
