// Code generated by protoc-gen-gin-http. DO NOT EDIT.
package v1

import (
	empty "github.com/golang/protobuf/ptypes/empty"
)

import (
	"github.com/zngue/zng_app/db/api"
	"context"
	"github.com/zngue/zng_app/pkg/validate"
	"github.com/zngue/zng_app/pkg/bind"
	"github.com/gin-gonic/gin"
)

// 注册服务
func RegisterCategoryGinServer(router *gin.RouterGroup, srv CategoryGinHttpService) *CategoryGinHttpRouterService {
	return NewCategoryGinHttpRouterService(router, srv)
}

// 服务操作
const OperationGinCategoryInfo = "api.test.v1.Category.Info"
const OperationGinCategoryListPage = "api.test.v1.Category.ListPage"
const OperationGinCategoryList = "api.test.v1.Category.List"
const OperationGinCategoryAdd = "api.test.v1.Category.Add"
const OperationGinCategoryUpdate = "api.test.v1.Category.Update"
const OperationGinCategoryDelete = "api.test.v1.Category.Delete"
const OperationGinCategoryContent = "api.test.v1.Category.Content"
const OperationGinCategoryStatus = "api.test.v1.Category.Status"

// 服务url
const OperationGinUrlCategoryInfo = "/v1/category/info"
const OperationGinUrlCategoryListPage = "/v1/category/listPage"
const OperationGinUrlCategoryList = "/v1/category/list"
const OperationGinUrlCategoryAdd = "/v1/category/add"
const OperationGinUrlCategoryUpdate = "/v1/category/update"
const OperationGinUrlCategoryDelete = "/v1/category/delete"
const OperationGinUrlCategoryContent = "/v1/category/content"
const OperationGinUrlCategoryStatus = "/v1/category/status"

//服务接口
type CategoryGinHttpService interface {
	Info(ctx context.Context, req *CategoryInfoRequest) (rs *CategoryInfoReply, err error)
	ListPage(ctx context.Context, req *CategoryListRequest) (rs *CategoryListReply, err error)
	List(ctx context.Context, req *CategoryListRequest) (rs *CategoryInfoListReply, err error)
	Add(ctx context.Context, req *CategoryAddRequest) (rs *empty.Empty, err error)
	Update(ctx context.Context, req *CategoryUpdateRequest) (rs *empty.Empty, err error)
	Delete(ctx context.Context, req *CategoryDeleteRequest) (rs *empty.Empty, err error)
	Content(ctx context.Context, req *CategoryContentRequest) (rs *CategoryContentReply, err error)
	Status(ctx context.Context, req *CategoryStatusRequest) (rs *empty.Empty, err error)
}
type CategoryGinHttpRouterService struct {
	srv    CategoryGinHttpService
	router *gin.RouterGroup
}

//服务注册
func (s *CategoryGinHttpRouterService) Register() {
	s.router.GET(OperationGinUrlCategoryInfo, _Category_Info0_GIN_HTTP_Handler(s.srv))
	s.router.GET(OperationGinUrlCategoryListPage, _Category_ListPage0_GIN_HTTP_Handler(s.srv))
	s.router.GET(OperationGinUrlCategoryList, _Category_List0_GIN_HTTP_Handler(s.srv))
	s.router.POST(OperationGinUrlCategoryAdd, _Category_Add0_GIN_HTTP_Handler(s.srv))
	s.router.POST(OperationGinUrlCategoryUpdate, _Category_Update0_GIN_HTTP_Handler(s.srv))
	s.router.POST(OperationGinUrlCategoryDelete, _Category_Delete0_GIN_HTTP_Handler(s.srv))
	s.router.GET(OperationGinUrlCategoryContent, _Category_Content0_GIN_HTTP_Handler(s.srv))
	s.router.POST(OperationGinUrlCategoryStatus, _Category_Status0_GIN_HTTP_Handler(s.srv))
}
func NewCategoryGinHttpRouterService(router *gin.RouterGroup, srv CategoryGinHttpService) *CategoryGinHttpRouterService {
	return &CategoryGinHttpRouterService{
		srv:    srv,
		router: router,
	}
}

func _Category_Info0_GIN_HTTP_Handler(srv CategoryGinHttpService) gin.HandlerFunc {
	return func(c *gin.Context) {
		var (
			in  CategoryInfoRequest
			err error
			rs  any
		)
		err = bind.Bind(c, &in)
		if err != nil {
			return
		}
		err = validate.Validate(&in)
		if err != nil {
			api.DataApiWithErr(c, err, rs)
			return
		}
		c.Set("operation", OperationGinCategoryInfo)
		ctx := c.Request.Context()
		ctx = context.WithValue(ctx, "operation", OperationGinCategoryInfo)
		ctx = context.WithValue(ctx, "gin_ctx", c)
		ctx, err = bind.GetMiddleWires(ctx)
		if err != nil {
			api.DataApiWithErr(c, err, rs)
			return
		}
		rs, err = srv.Info(ctx, &in)
		api.DataApiWithErr(c, err, rs)
	}
}

func _Category_ListPage0_GIN_HTTP_Handler(srv CategoryGinHttpService) gin.HandlerFunc {
	return func(c *gin.Context) {
		var (
			in  CategoryListRequest
			err error
			rs  any
		)
		err = bind.Bind(c, &in)
		if err != nil {
			return
		}
		err = validate.Validate(&in)
		if err != nil {
			api.DataApiWithErr(c, err, rs)
			return
		}
		c.Set("operation", OperationGinCategoryListPage)
		ctx := c.Request.Context()
		ctx = context.WithValue(ctx, "operation", OperationGinCategoryListPage)
		ctx = context.WithValue(ctx, "gin_ctx", c)
		ctx, err = bind.GetMiddleWires(ctx)
		if err != nil {
			api.DataApiWithErr(c, err, rs)
			return
		}
		rs, err = srv.ListPage(ctx, &in)
		api.DataApiWithErr(c, err, rs)
	}
}

func _Category_List0_GIN_HTTP_Handler(srv CategoryGinHttpService) gin.HandlerFunc {
	return func(c *gin.Context) {
		var (
			in  CategoryListRequest
			err error
			rs  any
		)
		err = bind.Bind(c, &in)
		if err != nil {
			return
		}
		err = validate.Validate(&in)
		if err != nil {
			api.DataApiWithErr(c, err, rs)
			return
		}
		c.Set("operation", OperationGinCategoryList)
		ctx := c.Request.Context()
		ctx = context.WithValue(ctx, "operation", OperationGinCategoryList)
		ctx = context.WithValue(ctx, "gin_ctx", c)
		ctx, err = bind.GetMiddleWires(ctx)
		if err != nil {
			api.DataApiWithErr(c, err, rs)
			return
		}
		rs, err = srv.List(ctx, &in)
		api.DataApiWithErr(c, err, rs)
	}
}

func _Category_Add0_GIN_HTTP_Handler(srv CategoryGinHttpService) gin.HandlerFunc {
	return func(c *gin.Context) {
		var (
			in  CategoryAddRequest
			err error
			rs  any
		)
		err = bind.Bind(c, &in)
		if err != nil {
			return
		}
		err = validate.Validate(&in)
		if err != nil {
			api.DataApiWithErr(c, err, rs)
			return
		}
		c.Set("operation", OperationGinCategoryAdd)
		ctx := c.Request.Context()
		ctx = context.WithValue(ctx, "operation", OperationGinCategoryAdd)
		ctx = context.WithValue(ctx, "gin_ctx", c)
		ctx, err = bind.GetMiddleWires(ctx)
		if err != nil {
			api.DataApiWithErr(c, err, rs)
			return
		}
		rs, err = srv.Add(ctx, &in)
		api.DataApiWithErr(c, err, rs)
	}
}

func _Category_Update0_GIN_HTTP_Handler(srv CategoryGinHttpService) gin.HandlerFunc {
	return func(c *gin.Context) {
		var (
			in  CategoryUpdateRequest
			err error
			rs  any
		)
		err = bind.Bind(c, &in)
		if err != nil {
			return
		}
		err = validate.Validate(&in)
		if err != nil {
			api.DataApiWithErr(c, err, rs)
			return
		}
		c.Set("operation", OperationGinCategoryUpdate)
		ctx := c.Request.Context()
		ctx = context.WithValue(ctx, "operation", OperationGinCategoryUpdate)
		ctx = context.WithValue(ctx, "gin_ctx", c)
		ctx, err = bind.GetMiddleWires(ctx)
		if err != nil {
			api.DataApiWithErr(c, err, rs)
			return
		}
		rs, err = srv.Update(ctx, &in)
		api.DataApiWithErr(c, err, rs)
	}
}

func _Category_Delete0_GIN_HTTP_Handler(srv CategoryGinHttpService) gin.HandlerFunc {
	return func(c *gin.Context) {
		var (
			in  CategoryDeleteRequest
			err error
			rs  any
		)
		err = bind.Bind(c, &in)
		if err != nil {
			return
		}
		err = validate.Validate(&in)
		if err != nil {
			api.DataApiWithErr(c, err, rs)
			return
		}
		c.Set("operation", OperationGinCategoryDelete)
		ctx := c.Request.Context()
		ctx = context.WithValue(ctx, "operation", OperationGinCategoryDelete)
		ctx = context.WithValue(ctx, "gin_ctx", c)
		ctx, err = bind.GetMiddleWires(ctx)
		if err != nil {
			api.DataApiWithErr(c, err, rs)
			return
		}
		rs, err = srv.Delete(ctx, &in)
		api.DataApiWithErr(c, err, rs)
	}
}

func _Category_Content0_GIN_HTTP_Handler(srv CategoryGinHttpService) gin.HandlerFunc {
	return func(c *gin.Context) {
		var (
			in  CategoryContentRequest
			err error
			rs  any
		)
		err = bind.Bind(c, &in)
		if err != nil {
			return
		}
		err = validate.Validate(&in)
		if err != nil {
			api.DataApiWithErr(c, err, rs)
			return
		}
		c.Set("operation", OperationGinCategoryContent)
		ctx := c.Request.Context()
		ctx = context.WithValue(ctx, "operation", OperationGinCategoryContent)
		ctx = context.WithValue(ctx, "gin_ctx", c)
		ctx, err = bind.GetMiddleWires(ctx)
		if err != nil {
			api.DataApiWithErr(c, err, rs)
			return
		}
		rs, err = srv.Content(ctx, &in)
		api.DataApiWithErr(c, err, rs)
	}
}

// StatusStatus
func _Category_Status0_GIN_HTTP_Handler(srv CategoryGinHttpService) gin.HandlerFunc {
	return func(c *gin.Context) {
		var (
			in  CategoryStatusRequest
			err error
			rs  any
		)
		err = bind.Bind(c, &in)
		if err != nil {
			return
		}
		err = validate.Validate(&in)
		if err != nil {
			api.DataApiWithErr(c, err, rs)
			return
		}
		c.Set("operation", OperationGinCategoryStatus)
		ctx := c.Request.Context()
		ctx = context.WithValue(ctx, "operation", OperationGinCategoryStatus)
		ctx = context.WithValue(ctx, "gin_ctx", c)
		ctx, err = bind.GetMiddleWires(ctx)
		if err != nil {
			api.DataApiWithErr(c, err, rs)
			return
		}
		rs, err = srv.Status(ctx, &in)
		api.DataApiWithErr(c, err, rs)
	}
}
