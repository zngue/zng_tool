// Code generated by protoc-gen-gin-http. DO NOT EDIT.
package v1

import (
	empty "github.com/golang/protobuf/ptypes/empty"
)

import (
	"context"
	"fmt"
	"github.com/gin-gonic/gin"
	"github.com/zngue/zng_app/pkg/bind"
	
	"github.com/zngue/zng_app/pkg/router"
	"github.com/zngue/zng_app/pkg/bind"
)

// 服务操作
const OperationGinCategoryList = "api.test.v1.Category.List"
const OperationGinCategoryAdd = "api.test.v1.Category.Add"
const OperationGinCategoryUpdate = "api.test.v1.Category.Update"
const OperationGinCategoryDelete = "api.test.v1.Category.Delete"
const OperationGinCategoryContent = "api.test.v1.Category.Content"

// 服务url
const OperationGinUrlCategoryList = "/v1/category/list"
const OperationGinUrlCategoryAdd = "/v1/category/add"
const OperationGinUrlCategoryUpdate = "/v1/category/update"
const OperationGinUrlCategoryDelete = "/v1/category/delete"
const OperationGinUrlCategoryContent = "/v1/category/content"
// 服务接口
//服务接口
type CategoryGinHttpService interface {
	List(ctx context.Context, req *CategoryListRequest) (rs *CategoryListReply, err error)
	Add(ctx context.Context, req *CategoryAddRequest) (rs *empty.Empty, err error)
	Update(ctx context.Context, req *CategoryUpdateRequest) (rs *empty.Empty, err error)
	Delete(ctx context.Context, req *CategoryDeleteRequest) (rs *empty.Empty, err error)
	Content(ctx context.Context, req *CategoryContentRequest) (rs *CategoryContentReply, err error)
}
type CategoryGinHttpRouterService struct {
	srv    CategoryGinHttpService
	router *gin.RouterGroup
}
// 服务注册
//服务注册
func (s *CategoryGinHttpRouterService) Register() []router.IRouter {
	return router.ApiServiceFn(
		router.ApiGetFn(s.router, OperationGinUrlCategoryList, s.List),
		router.ApiPostFn(s.router, OperationGinUrlCategoryAdd, s.Add),
		router.ApiPostFn(s.router, OperationGinUrlCategoryUpdate, s.Update),
		router.ApiPostFn(s.router, OperationGinUrlCategoryDelete, s.Delete),
		router.ApiGetFn(s.router, OperationGinUrlCategoryContent, s.Content),
	)
}

func (s *CategoryGinHttpRouterService) List(ginCtx *gin.Context) (rs any, err error) {
	var in CategoryListRequest
	err = bind.Bind(ginCtx, &in)
	if err != nil {
		return
	}
	err = validate.Validate(&in)
	if err != nil {
		return
	}
	ginCtx.Set("operation", OperationGinCategoryList)
	ctx := ginCtx.Request.Context()
	ctx = context.WithValue(ctx, "operation", OperationGinCategoryList)
	ctx = context.WithValue(ctx, "gin_ctx", ginCtx)
	rs, err = s.srv.List(ctx, &in)
	return
}

func (s *CategoryGinHttpRouterService) Add(ginCtx *gin.Context) (rs any, err error) {
	var in CategoryAddRequest
	err = bind.Bind(ginCtx, &in)
	if err != nil {
		return
	}
	err = validate.Validate(&in)
	if err != nil {
		return
	}
	ginCtx.Set("operation", OperationGinCategoryAdd)
	ctx := ginCtx.Request.Context()
	ctx = context.WithValue(ctx, "operation", OperationGinCategoryAdd)
	ctx = context.WithValue(ctx, "gin_ctx", ginCtx)
	rs, err = s.srv.Add(ctx, &in)
	return
}

func (s *CategoryGinHttpRouterService) Update(ginCtx *gin.Context) (rs any, err error) {
	var in CategoryUpdateRequest
	err = bind.Bind(ginCtx, &in)
	if err != nil {
		return
	}
	err = validate.Validate(&in)
	if err != nil {
		return
	}
	ginCtx.Set("operation", OperationGinCategoryUpdate)
	ctx := ginCtx.Request.Context()
	ctx = context.WithValue(ctx, "operation", OperationGinCategoryUpdate)
	ctx = context.WithValue(ctx, "gin_ctx", ginCtx)
	rs, err = s.srv.Update(ctx, &in)
	return
}

func (s *CategoryGinHttpRouterService) Delete(ginCtx *gin.Context) (rs any, err error) {
	var in CategoryDeleteRequest
	err = bind.Bind(ginCtx, &in)
	if err != nil {
		return
	}
	err = validate.Validate(&in)
	if err != nil {
		return
	}
	ginCtx.Set("operation", OperationGinCategoryDelete)
	ctx := ginCtx.Request.Context()
	ctx = context.WithValue(ctx, "operation", OperationGinCategoryDelete)
	ctx = context.WithValue(ctx, "gin_ctx", ginCtx)
	rs, err = s.srv.Delete(ctx, &in)
	return
}

func (s *CategoryGinHttpRouterService) Content(ginCtx *gin.Context) (rs any, err error) {
	var in CategoryContentRequest
	err = bind.Bind(ginCtx, &in)
	if err != nil {
		return
	}
	err = validate.Validate(&in)
	if err != nil {
		return
	}
	ginCtx.Set("operation", OperationGinCategoryContent)
	ctx := ginCtx.Request.Context()
	ctx = context.WithValue(ctx, "operation", OperationGinCategoryContent)
	ctx = context.WithValue(ctx, "gin_ctx", ginCtx)
	rs, err = s.srv.Content(ctx, &in)
	return
}
func NewCategoryGinHttpRouterService(router *gin.RouterGroup, srv CategoryGinHttpService) *CategoryGinHttpRouterService {
	return &CategoryGinHttpRouterService{
		srv:    srv,
		router: router,
	}
}
